/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RegisterImport } from './routes/register'
import { Route as ProfileImport } from './routes/profile'
import { Route as PostForumImport } from './routes/postForum'
import { Route as PasswordImport } from './routes/password'
import { Route as LoginImport } from './routes/login'
import { Route as ForumImport } from './routes/forum'
import { Route as FavoritesImport } from './routes/favorites'
import { Route as DeleteImport } from './routes/delete'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const ProfileRoute = ProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRoute,
} as any)

const PostForumRoute = PostForumImport.update({
  id: '/postForum',
  path: '/postForum',
  getParentRoute: () => rootRoute,
} as any)

const PasswordRoute = PasswordImport.update({
  id: '/password',
  path: '/password',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const ForumRoute = ForumImport.update({
  id: '/forum',
  path: '/forum',
  getParentRoute: () => rootRoute,
} as any)

const FavoritesRoute = FavoritesImport.update({
  id: '/favorites',
  path: '/favorites',
  getParentRoute: () => rootRoute,
} as any)

const DeleteRoute = DeleteImport.update({
  id: '/delete',
  path: '/delete',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/delete': {
      id: '/delete'
      path: '/delete'
      fullPath: '/delete'
      preLoaderRoute: typeof DeleteImport
      parentRoute: typeof rootRoute
    }
    '/favorites': {
      id: '/favorites'
      path: '/favorites'
      fullPath: '/favorites'
      preLoaderRoute: typeof FavoritesImport
      parentRoute: typeof rootRoute
    }
    '/forum': {
      id: '/forum'
      path: '/forum'
      fullPath: '/forum'
      preLoaderRoute: typeof ForumImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/password': {
      id: '/password'
      path: '/password'
      fullPath: '/password'
      preLoaderRoute: typeof PasswordImport
      parentRoute: typeof rootRoute
    }
    '/postForum': {
      id: '/postForum'
      path: '/postForum'
      fullPath: '/postForum'
      preLoaderRoute: typeof PostForumImport
      parentRoute: typeof rootRoute
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/delete': typeof DeleteRoute
  '/favorites': typeof FavoritesRoute
  '/forum': typeof ForumRoute
  '/login': typeof LoginRoute
  '/password': typeof PasswordRoute
  '/postForum': typeof PostForumRoute
  '/profile': typeof ProfileRoute
  '/register': typeof RegisterRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/delete': typeof DeleteRoute
  '/favorites': typeof FavoritesRoute
  '/forum': typeof ForumRoute
  '/login': typeof LoginRoute
  '/password': typeof PasswordRoute
  '/postForum': typeof PostForumRoute
  '/profile': typeof ProfileRoute
  '/register': typeof RegisterRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/delete': typeof DeleteRoute
  '/favorites': typeof FavoritesRoute
  '/forum': typeof ForumRoute
  '/login': typeof LoginRoute
  '/password': typeof PasswordRoute
  '/postForum': typeof PostForumRoute
  '/profile': typeof ProfileRoute
  '/register': typeof RegisterRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/delete'
    | '/favorites'
    | '/forum'
    | '/login'
    | '/password'
    | '/postForum'
    | '/profile'
    | '/register'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/delete'
    | '/favorites'
    | '/forum'
    | '/login'
    | '/password'
    | '/postForum'
    | '/profile'
    | '/register'
  id:
    | '__root__'
    | '/'
    | '/delete'
    | '/favorites'
    | '/forum'
    | '/login'
    | '/password'
    | '/postForum'
    | '/profile'
    | '/register'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DeleteRoute: typeof DeleteRoute
  FavoritesRoute: typeof FavoritesRoute
  ForumRoute: typeof ForumRoute
  LoginRoute: typeof LoginRoute
  PasswordRoute: typeof PasswordRoute
  PostForumRoute: typeof PostForumRoute
  ProfileRoute: typeof ProfileRoute
  RegisterRoute: typeof RegisterRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DeleteRoute: DeleteRoute,
  FavoritesRoute: FavoritesRoute,
  ForumRoute: ForumRoute,
  LoginRoute: LoginRoute,
  PasswordRoute: PasswordRoute,
  PostForumRoute: PostForumRoute,
  ProfileRoute: ProfileRoute,
  RegisterRoute: RegisterRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/delete",
        "/favorites",
        "/forum",
        "/login",
        "/password",
        "/postForum",
        "/profile",
        "/register"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/delete": {
      "filePath": "delete.tsx"
    },
    "/favorites": {
      "filePath": "favorites.tsx"
    },
    "/forum": {
      "filePath": "forum.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/password": {
      "filePath": "password.tsx"
    },
    "/postForum": {
      "filePath": "postForum.tsx"
    },
    "/profile": {
      "filePath": "profile.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
